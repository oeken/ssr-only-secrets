{"version":3,"sources":["../src/rsc.ts","../src/shared.ts"],"sourcesContent":["import { experimental_taintUniqueValue } from \"react\";\nimport { getEncryptionKey, serialize } from \"./shared.js\";\n\ndeclare module \"react\" {\n  type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array\n    | BigInt64Array\n    | BigUint64Array;\n  export const experimental_taintUniqueValue:\n    | undefined\n    | ((\n        message: string,\n        lifetime: object,\n        value: string | bigint | TypedArray\n      ) => void);\n}\n\n/**\n * Encrypts a secret so that it can be passed from Server Components into the\n * SSR-run of Client Components without them being accessible in the browser.\n *\n * Use `useSSROnlySecret` or `readSSROnlySecret` to decrypt the secret in your\n * Client Component.\n *\n * Only available in Server Components.\n *\n * @public\n */\nexport async function cloakSSROnlySecret(\n  secret: string,\n  encryptionEnvVarName: string\n) {\n  if (experimental_taintUniqueValue) {\n    experimental_taintUniqueValue(\n      `Do not pass the content of the envrionment variable \"${encryptionEnvVarName}\" directly into client component props. This is unsafe!`,\n      process,\n      secret\n    );\n  }\n\n  const key = await getEncryptionKey(encryptionEnvVarName);\n  const encoded = new TextEncoder().encode(secret);\n\n  const iv = crypto.getRandomValues(new Uint8Array(16));\n  const crypt = crypto.subtle.encrypt(\n    {\n      name: \"AES-CBC\",\n      iv: iv,\n    },\n    key,\n    encoded\n  );\n\n  return serialize(await crypt, iv);\n}\n","export function getEncryptionKey(envVarName: string): Promise<CryptoKey> {\n  if (envVarName == undefined) {\n    throw new Error(\n      \"You need to specify the name for a secret-holding environment variable.\"\n    );\n  }\n  if (envVarName.startsWith(\"NEXT_PUBLIC_\")) {\n    throw new Error(\n      \"You cannot use NEXT_PUBLIC_ environment variables for secrets, as they would be transported to the browser.\"\n    );\n  }\n  const encryption_key = process.env[envVarName];\n  if (!encryption_key) {\n    throw new Error(\n      \"There is no environment variable named \" + envVarName + \".\"\n    );\n  }\n  let parsed: JsonWebKey;\n  try {\n    const buffer = Buffer.from(encryption_key, \"base64\");\n    const decodedKey = buffer.toString(\"utf8\");\n    parsed = JSON.parse(decodedKey);\n  } catch {\n    throw new Error(\n      \"The environment variable \" +\n        envVarName +\n        \" does not contain a valid JSON string.\"\n    );\n  }\n  return crypto.subtle.importKey(\"jwk\", parsed, \"AES-CBC\", false, [\n    \"encrypt\",\n    \"decrypt\",\n  ]);\n}\n\nexport function serialize(crypt: ArrayBuffer, iv: Uint8Array) {\n  return (\n    Buffer.from(crypt).toString(\"base64\") +\n    \":\" +\n    Buffer.from(iv).toString(\"base64\")\n  );\n}\n\nexport function deserialize(serialized: string) {\n  const [crypt, iv] = serialized.split(\":\");\n  return [\n    Buffer.from(crypt, \"base64\"),\n    Uint8Array.from(Buffer.from(iv, \"base64\")),\n  ] as const;\n}\n"],"mappings":";AAAA,SAAS,qCAAqC;;;ACAvC,SAAS,iBAAiB,YAAwC;AACvE,MAAI,cAAc,QAAW;AAC3B,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,MAAI,WAAW,WAAW,cAAc,GAAG;AACzC,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,QAAM,iBAAiB,QAAQ,IAAI,UAAU;AAC7C,MAAI,CAAC,gBAAgB;AACnB,UAAM,IAAI;AAAA,MACR,4CAA4C,aAAa;AAAA,IAC3D;AAAA,EACF;AACA,MAAI;AACJ,MAAI;AACF,UAAM,SAAS,OAAO,KAAK,gBAAgB,QAAQ;AACnD,UAAM,aAAa,OAAO,SAAS,MAAM;AACzC,aAAS,KAAK,MAAM,UAAU;AAAA,EAChC,QAAQ;AACN,UAAM,IAAI;AAAA,MACR,8BACE,aACA;AAAA,IACJ;AAAA,EACF;AACA,SAAO,OAAO,OAAO,UAAU,OAAO,QAAQ,WAAW,OAAO;AAAA,IAC9D;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAEO,SAAS,UAAU,OAAoB,IAAgB;AAC5D,SACE,OAAO,KAAK,KAAK,EAAE,SAAS,QAAQ,IACpC,MACA,OAAO,KAAK,EAAE,EAAE,SAAS,QAAQ;AAErC;;;ADLA,eAAsB,mBACpB,QACA,sBACA;AACA,MAAI,+BAA+B;AACjC;AAAA,MACE,wDAAwD,oBAAoB;AAAA,MAC5E;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,QAAM,MAAM,MAAM,iBAAiB,oBAAoB;AACvD,QAAM,UAAU,IAAI,YAAY,EAAE,OAAO,MAAM;AAE/C,QAAM,KAAK,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC;AACpD,QAAM,QAAQ,OAAO,OAAO;AAAA,IAC1B;AAAA,MACE,MAAM;AAAA,MACN;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO,UAAU,MAAM,OAAO,EAAE;AAClC;","names":[]}